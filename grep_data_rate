#!/bin/bash

# molecules=$(ls -d */ | sed 's:/*$::')
# molecules=("1OB1") #"1OB2" "1OB3" "1OB4")
molecules=("1DA3")
functionals=("O3LYP" "pbe0" "camB3LYP" "M062X" ) #"wB97XD4")
states=("s0" "s1" "t1")

# csv_file="CM5192_calculation_data.csv"
if [ -z "$1" ]; then
  output="data.csv"
else
  output=${1}_rate.csv
fi

echo "Molecule_Name,Functional,S0,S1,T1,Energy_Gap,Fluorescence_Rate,ISC1,ISC2,ISC3,ISC_Rate,RISC1,RISC2,RISC3,RISC_Rate,D_Index,XYZ_S1_S0,XYZ_T1_S0,XYZ_T1_S1,ref_molecule" > $output


for molecule in $molecules; do
    # echo "molecule: $molecule"
    if [[ ! "$molecule" =~ ^[0-9] ]]; then
      continue
    fi
    cd $molecule
    echo "Molecule: $molecule"
    ref="0${molecule:1:2}0"
    echo "Reference: $ref"

    for functional in "${functionals[@]}"; do
        GS="$molecule"_"$functional"_svp_s0_scf_optfreq
        ES=${molecule}_${functional}_svp_s1_Dscf_optfreq
        ES_td=${molecule}_${functional}_svp_s1_tddft_optfreq
        ES2=${molecule}_${functional}_svp_s2_tddft_optfreq
        TS="$molecule"_"$functional"_svp_t1_Dscf_optfreq
        TS_scf="$molecule"_"$functional"_svp_t1_scf_optfreq
        FLUO="$molecule"_"$functional"_svp_s1_esd_fluo
        ISC_1="$molecule"_"$functional"_svp_t1_esd_isc_T1
        ISC_2="$molecule"_"$functional"_svp_t1_esd_isc_T2
        ISC_3="$molecule"_"$functional"_svp_t1_esd_isc_T3
        RISC_1="$molecule"_"$functional"_svp_t1_esd_risc_T1
        RISC_2="$molecule"_"$functional"_svp_t1_esd_risc_T2
        RISC_3="$molecule"_"$functional"_svp_t1_esd_risc_T3
        optimisations=($GS $ES $ES_td $ES2 $TS $TS_scf )
        # for file in "${files[@]}"; do
        #     echo "file: $file"
        # done
        # echo $file
        # finish=$(ORCA-chkjob -q "$file")
        # if [ "$finish" -eq 0 ]; then
        #     echo "!!!!!!!!!!!!!!!!!!! Job $file not finished"
        #     continue
        # fi

        # check if the files exist
        if [ ! -f "$GS.out" ]; then
            # echo "$GS.out"
            continue
        fi

        # check imaginary modes
        for s in "${optimisations[@]}" ; do
            if [ -f "$s.inp" ]; then
                continue
            fi
            if [ ! -f "$s.hess" ]; then
                echo $s
                hess=1
            else
                freq=`grep --text "vibrational_frequencies" -A 8 $s.hess | tail -n 1 | awk '{print $2}'`
                if [[ "$freq" == -* ]]; then
                    echo $s.hess
                    echo "Frequency 6: $freq"
                    hess=1
                else
                    hess=0
                fi
            fi
        done

        SPE_S0=$(ORCA-GrepSPE -q "$GS.out")
        SPE_S1=$(ORCA-GrepSPE -q "$ES.out")
        
        
        smallest_spe=$(printf "%.10f" "$SPE_S1")
        for S1 in $ES $ES_td; do
            if [ -f "$TS.out" ]; then
                T1="$TS"
            elif [ -f "$TS_scf.out" ]; then
                T1="$TS_scf"
            else
                echo "No T1 file found for $molecule with $functional"
                break
            fi

            SPE_T1=$(ORCA-GrepSPE -q "$T1.out")
            SPE=$(ORCA-GrepSPE -q "$S1.out")

            if (( $(echo "$SPE < $SPE_T1" | bc -l) )); then
                echo "$S1 is lower than $T1"
                Energy_Gap=$(ORCA-GrepAdDiff -q "$S1.out" "$T1.out")
                continue
            fi
            if (( $(echo "$SPE < $smallest_spe" | bc -l) )); then
                echo "Smallest SPE $S1: $SPE"
                smallest_spe=$SPE
                SPE_S1=$SPE 
                Energy_Gap=$(ORCA-GrepAdDiff -q "$S1.out" "$T1.out")
            fi
            
        done
        
        echo "Energy Gap: $Energy_Gap"
        Fluorescence_rate=$(ORCA-Grepk -q "$FLUO.out")
        
        ISC_rate_1=$(ORCA-Grepk -q "$ISC_1.out")
        ISC_rate_2=$(ORCA-Grepk -q "$ISC_2.out")
        ISC_rate_3=$(ORCA-Grepk -q "$ISC_3.out")


        RISC_rate_1=$(ORCA-Grepk -q "$RISC_1.out")
        RISC_rate_2=$(ORCA-Grepk -q "$RISC_2.out")
        RISC_rate_3=$(ORCA-Grepk -q "$RISC_3.out")


        # echo "ISC rate 1: $ISC_rate_1"
        # echo "ISC rate 2: $ISC_rate_2"
        # echo "ISC rate 3: $ISC_rate_3"



        # Make sure 1 and 3 are equal if one of them is zero
        if [ -z $ISC_rate_3 ] && [ "$ISC_rate_1" != "0.00000000e+00" ]; then
            ISC_rate_3=$ISC_rate_1
            # echo "Replaced ISC rate 3 with ISC rate 1"
        elif [ -z $ISC_rate_1 ] && [ "$ISC_rate_3" != "0.00000000e+00" ]; then
            ISC_rate_1=$ISC_rate_3
        fi

        if [ -z $RISC_rate_3 ] && [ "$RISC_rate_1" != "0.00000000e+00" ]; then
            RISC_rate_3=$RISC_rate_1
            # echo "Replaced RISC rate 3 with RISC rate 1"
        elif [ -z $RISC_rate_1 ] && [ "$RISC_rate_3" != "0.00000000e+00" ]; then
            RISC_rate_1=$RISC_rate_3
        fi
        ISC_sum=$(printf "%.10g + %.10g + %.10g\n" "$ISC_rate_1" "$ISC_rate_2" "$ISC_rate_3" | bc -l 2>/dev/null)
        RISC_sum=$(printf "%.10g + %.10g + %.10g\n" "$RISC_rate_1" "$RISC_rate_2" "$RISC_rate_3" | bc -l 2>/dev/null)
        # echo "ISC 1: $ISC_rate_1"
        # echo "ISC 2: $ISC_rate_2"
        # echo "ISC 3: $ISC_rate_3"
        # echo "ISC sum: $ISC_sum"
        # echo "RISC 1: $RISC_rate_1"
        # echo "RISC 2: $RISC_rate_2"
        # echo "RISC 3: $RISC_rate_3"
        # echo "RISC sum: $RISC_sum"
        if [ "$ISC_sum" != "0.00000000e+00" ]; then
            if (( $(echo "$ISC_sum < 0" | bc -l) )); then
                # echo "Negative ISC rate for $molecule with $functional"
                ISC_average="NaN"
            else
                ISC_average=$(printf "%.10g / 3\n" "$ISC_sum" | bc -l 2>/dev/null)
                # echo "ISC average: $ISC_average"
            fi
        else
            ISC_average=0.0000000000
        fi

        if [ "$RISC_sum" != "0.00000000e+00" ]; then
            if (( $(echo "$RISC_sum < 0" | bc -l) )); then
                # echo "Negative RISC rate for $molecule with $functional"
                RISC_average="NaN"
            else
                RISC_average=$(printf "%.10g / 3\n" "$RISC_sum" | bc -l 2>/dev/null)
                # echo "RISC average: $RISC_average"
            fi
        else
            RISC_average=0.0000000000
        fi

        # multiwfn_ana $FLUO s1
        # echo "RUNNING: multiwfn_ana $FLUO s1"

        # if [ -f "$FLUO.gbw" ]; then
        #     # echo "Multiwfn analysis for $FLUO"
        #     DIndex_S1=$(multiwfn_ana $FLUO)
        # else
        #     # echo "Multiwfn analysis for $FLUO.gbw"
        #     DIndex_S1=0
        # fi
       
        if [[ "${@}" =~ "offct" ]]; then
            DIndex_S1=$(grep "D index" multiwfn_$FLUO.out | tail -n 1 | awk '{print $9}')
        else 
            DIndex_S1=$(~/bin/ORCA/multiwfn_ana $FLUO s1)
        fi
        if [ -f "$ES.xyz" ] && [ -f "$GS.xyz" ]; then
            XYZ_S1_S0=$(calculate_rmsd $ES.xyz $GS.xyz 2>&1)
        fi
        if [ -f "$TS.xyz" ] && [ -f "$GS.xyz" ]; then
            XYZ_T1_S0=$(calculate_rmsd $TS.xyz $GS.xyz 2>&1)
        fi
        if [ -f "$TS.xyz" ] && [ -f "$ES.xyz" ]; then
            XYZ_T1_S1=$(calculate_rmsd $TS.xyz $ES.xyz 2>&1)
        fi
        

        SPE_S0=$(printf "%.10f" "$SPE_S0")
        SPE_S1=$(printf "%.10f" "$SPE_S1")
        SPE_T1=$(printf "%.10f" "$SPE_T1")
        Energy_Gap=$(printf "%.10f" "$Energy_Gap")
        Fluorescence_rate=$(printf "%.8e" "$Fluorescence_rate")
        ISC_rate_1=$(printf "%.8e" "$ISC_rate_1")
        ISC_rate_2=$(printf "%.8e" "$ISC_rate_2")
        ISC_rate_3=$(printf "%.8e" "$ISC_rate_3")
        ISC_average=$(printf "%.8e" "$ISC_average")
        RISC_rate_1=$(printf "%.8e" "$RISC_rate_1")
        RISC_rate_2=$(printf "%.8e" "$RISC_rate_2")
        RISC_rate_3=$(printf "%.8e" "$RISC_rate_3")
        RISC_average=$(printf "%.8e" "$RISC_average")
        XYZ_S1_S0=$(printf "%.10f" "$XYZ_S1_S0")
        XYZ_T1_S1=$(printf "%.10f" "$XYZ_T1_S1")
        XYZ_T1_S0=$(printf "%.10f" "$XYZ_T1_S0")
        

        # $DIndex_S1=$(printf "%.3e" "$$DIndex_S1")
        # CT_T1=$(printf "%.3e" "$CT_T1")

        # echo "SPE_S0: $SPE_S0"
        # echo "SPE_S1: $SPE_S1"
        # echo "SPE_T1: $SPE_T1"
        # echo "Fluorescence rate for $molecule with $functional: $Fluorescence_rate"
        # echo "Energy Gap (S1 - T1) for $molecule with $functional: $Energy_Gap eV"
        # echo "ISC rate for $molecule with $functional: $ISC_average"
        # echo "RISC rate for $molecule with $functional: $RISC_average"
        # echo "Energy Gap (S1 - T1) for $molecule with $functional: $Energy_Gap eV"
        # Append the new data to the arrays



        if [ "$SPE_S0" == "0" ]; then
            if ! qjlist | grep -q "$GS"; then
                echo "$GS"  
            fi
        fi

        if [ "$SPE_S1"  == "0" ]; then
            if ! qjlist | grep -q "$ES"; then
                echo "$ES"
            fi
        fi

        if [ "$SPE_T1"  == "0" ]; then
            if ! qjlist | grep -q "$TS"; then
            echo "$TS"
            fi
        fi

        if [ "$Fluorescence_rate" == "0.00000000e+00" ]; then
            if ! qjlist | grep -q "$FLUO"; then
                echo "$FLUO"
            fi
        fi

        if [ "$ISC_rate_1" == "0.00000000e+00" ]; then
            echo "$ISC_1"
        fi
        if [ "$ISC_rate_2" == "0.00000000e+00" ]; then
            echo "$ISC_2"
        fi
        if [ "$ISC_rate_3" == "0.00000000e+00" ]; then
            echo "$ISC_3"
        fi

        if [ "$RISC_rate_1" == "0.00000000e+00" ]; then
            echo "$RISC_1"
        fi

        if [ "$RISC_rate_2" == "0.00000000e+00" ]; then
            echo "$RISC_2"
        fi

        if [ "$RISC_rate_3" == "0.00000000e+00" ]; then
            echo "$RISC_3"
        fi

        # echo "writing to $output"

        # Debugging: Print the values of the variables
        # echo "Debug: molecule=$molecule, functional=$functional, SPE_S0=$SPE_S0, SPE_S1=$SPE_S1, SPE_T1=$SPE_T1, Energy_Gap=$Energy_Gap, Fluorescence_rate=$Fluorescence_rate, ISC_rate_1=$ISC_rate_1, ISC_rate_2=$ISC_rate_2, ISC_rate_3=$ISC_rate_3, ISC_average=$ISC_average, RISC_rate_1=$RISC_rate_1, RISC_rate_2=$RISC_rate_2, RISC_rate_3=$RISC_rate_3, RISC_average=$RISC_average, DIndex_S1=$DIndex_S1, XYZ_S1_S0=$XYZ_S1_S0, XYZ_T1_S0=$XYZ_T1_S0, XYZ_T1_S1=$XYZ_T1_S1, ref=$ref"

        echo "${molecule},${functional},\"${SPE_S0}\",\"${SPE_S1}\",\"${SPE_T1}\",\"${Energy_Gap}\",\"${Fluorescence_rate}\",\"${ISC_rate_1}\",\"${ISC_rate_2}\",\"${ISC_rate_3}\",\"${ISC_average}\",\"${RISC_rate_1}\",\"${RISC_rate_2}\",\"${RISC_rate_3}\",\"${RISC_average}\",\"${DIndex_S1}\",\"${XYZ_S1_S0}\",\"${XYZ_T1_S0}\",\"${XYZ_T1_S1}\",\"${ref}\"" >> ../$output
        


    done
    cd ..
done

# {
#     for ((i=0; i<${#MoleculeNames[@]}; i++)); do
#         echo "${MoleculeNames[i]},${Functionals[i]},${spe_s0[i]},${spe_s1[i]},${spe_t1[i]},${energy_gap[i]},${fluorescence_rate[i]},${isc_rate_1[i]},${isc_rate_2[i]},${isc_rate_3[i]},${isc_rate_avg[i]},${risc_rate_1[i]},${risc_rate_2[i]},${risc_rate_3[i]},${risc_rate_avg[i]},${CT_S1[i]},${xyz_S1_S0[i]},${xyz_T1_S0[i]},${xyz_T1_S1[i]},${REF[i]}"
#     done
# } >> $output

# echo "Data has been processed and saved to $output"