#!/bin/bash

molecules=$(ls -d */ | sed 's:/*$::')
# molecules="1TD4"  
functionals=("O3LYP" "pbe0" "camB3LYP" "M062X") #"wB97XD4")
states=("s0" "s1" "t1")
 
# csv_file="CM5192_calculation_data.csv"
if [ -z "$1" ]; then
  output="soc_risc.csv"
else
  output=${1}_risc.csv
fi

calculate_average() {
    local list=("$@")
    printf "%s\n" "${list[@]}" | awk '{sum+=$1} END {if (NR > 0) printf "%.6e\n", sum/NR}'
}

echo "Molecule,Functional,RISC_Rate,npoints1,npoints2,K_Vector_sum,lamda_sum(cm-1),lamda_max_freq,lamda_maxmode_socme1,lamda_maxmode_socme2,HR_max_freq,HR_max_mode,HR_max_factor,HR_maxmode_socme1,HR_maxmode_socme2,rmsd_s1_t1,ref_socme1,ref_socme2,MarcusRate" > $output

# molecules=("1CZ5" "1CZ6" "1CZ7" "1CZ8" "1CZ9" "1CZA" "1CZD" "1CZE" "1CZF" "1CZG" "1CZH" "1CZI" "1CZJ" "1CZK" "1CZM" "1CZN")

for molecule in $molecules; do
    # echo "molecule: $molecule"
    if [[ ! "$molecule" =~ ^[0-9] ]]; then
      continue
    fi
    cd $molecule
    echo " ------------------ Molecule: $molecule ------------------"
    # ref="0${molecule:1:2}0"
    # echo "Reference: $ref"

    for functional in "${functionals[@]}"; do
        GS="$molecule"_"$functional"_svp_s0_scf_optfreq
        ES=${molecule}_${functional}_svp_s1_Dscf_optfreq
        TS="$molecule"_"$functional"_svp_t1_Dscf_optfreq
        FLUO="$molecule"_"$functional"_svp_s1_esd_fluo
        RISC_1="$molecule"_"$functional"_svp_t1_esd_risc_T1
        RISC_2="$molecule"_"$functional"_svp_t1_esd_risc_T2
        Hab="$molecule"_"$functional"_svp_s1_Hab_scf
        files=($RISC_1 $RISC_2)
        for file in "${files[@]}"; do
            if [ ! -f "$file.out" ]; then
                echo "Error: $file.out not found"
                continue 2
                
            fi
            rate=$(ORCA-Grepk -q "$file.out")
            if [ -z "$rate" ]; then
                echo "Error: $file.out not found or empty"
                continue 2
            fi
            if [ "$rate" == "0" ]; then
                echo "Error: $file.out has zero rate"
                continue 2
            fi
        done
        
        RISC_rate_1=$(ORCA-Grepk -q "$RISC_1.out")
        RISC_rate_2=$(ORCA-Grepk -q "$RISC_2.out")
        RISC_rate_3=$(ORCA-Grepk -q "$RISC_3.out")
        E_ES=$(ORCA-GrepSPE -q "$ES.out")
        E_Hab=$(ORCA-GrepSPE -q "$Hab.out")
        E_TS=$(ORCA-GrepSPE -q "$TS.out")

        # Make sure 1 and 3 are equal if one of them is zero

        if [ -z $RISC_rate_3 ] && [ "$RISC_rate_1" != "0.00000000e+00" ]; then
            RISC_rate_3=$RISC_rate_1
            # echo "Replaced RISC rate 3 with RISC rate 1"
        elif [ -z $RISC_rate_1 ] && [ "$RISC_rate_3" != "0.00000000e+00" ]; then
            RISC_rate_1=$RISC_rate_3
        fi
        echo "$functional RISC rates: $RISC_rate_1, $RISC_rate_2, $RISC_rate_3"
        RISC_sum=$(printf "%.10g + %.10g + %.10g\n" "$RISC_rate_1" "$RISC_rate_2" "$RISC_rate_3" | bc -l 2>/dev/null)

        if [ "$RISC_sum" != "0.00000000e+00" ]; then
            if (( $(echo "$RISC_sum < 0" | bc -l) )); then
                # echo "Negative RISC rate for $molecule with $functional"
                RISC_average="NaN"
            else
                RISC_average=$(calculate_average $RISC_rate_1 $RISC_rate_2 $RISC_rate_3)
                # echo "RISC average: $RISC_average"
            fi
        else
            RISC_average=0.0000000000
        fi

        ORCA-GrepVC $RISC_1.out 
        ORCA-GrepVC $RISC_2.out

        if [ ! -f "${RISC_1}.out" ]; then
            # echo "Error: ${RISC_1}.out not found"
            lamda_max_freq=0
            lamda_maxmode_socme="0"
            HR_max_freq=0
            HR_maxmode_socme="0"
            lamda=0
            K_vector=0
            npints=0
            continue
        fi

        # Extract total reorganization energy and K vector
        lamda=$(awk '/The total reorganization energy is:/ {print $6}' "$RISC_1.out")
        K_vector=$(awk '/The sum of K/ {print $6}' "$RISC_1.out")

        # Get mode with max lambda (by 2nd column) and its frequency
        lamda_max_freq=$(sort -k2,2n "${RISC_1}_lamda.data" | tail -n 1 | awk '{print $3}')
        lamda_max_mode=$(sort -k2,2n "${RISC_1}_lamda.data" | tail -n 1 | awk '{print $1}')

        # Get SOCME for the max lambda mode
        lamda_maxmode_socme1=$(awk -v mode="$lamda_max_mode" '$1 == mode {print $2 $3}' "${RISC_1}_socme.data")
        lamda_maxmode_socme2=$(awk -v mode="$lamda_max_mode" '$1 == mode {print $2 $3}' "${RISC_2}_socme.data")
        # echo "lamda_maxmode_socme: $lamda_maxmode_socme1, $lamda_maxmode_socme2"

        # Get max HR mode and frequency
        HR_max_freq=$(sort -k2,2n "${RISC_1}_HR.data" | tail -n 1 | awk '{print $3}')
        HR_max_factor=$(sort -k2,2n "${RISC_1}_HR.data" | tail -n 1 | awk '{print $2}')
        HR_max_mode=$(sort -k2,2n "${RISC_1}_HR.data" | tail -n 1 | awk '{print $1}')

        # Get SOCME for HR max mode from both RISC files
        HR_maxmode_socme1=$(awk -v mode="$HR_max_mode" '$1 == mode {print $2 $3}' "${RISC_1}_socme.data")
        HR_maxmode_socme2=$(awk -v mode="$HR_max_mode" '$1 == mode {print $2 $3}' "${RISC_2}_socme.data")


        # echo "HR_maxmode_socme2: $HR_maxmode_socme1, $HR_maxmode_socme2"
        npoints1=$(grep "Number of points:" $RISC_1.out | awk '{print $4}')
        npoints2=$(grep "Number of points:" $RISC_2.out | awk '{print $4}')
        ref_socme1=$(grep "Reference SOC (Re and Im)" ${RISC_1}.out | awk '{print $6 $7}')
        ref_socme2=$(grep "Reference SOC (Re and Im)" ${RISC_2}.out | awk '{print $6 $7}')


        XYZ_T1_S1=$(grep "The RMSD is" $RISC_1.out | awk '{print $4}')
      

        RISC_rate_1=$(printf "%.8e" "$RISC_rate_1")
        RISC_rate_2=$(printf "%.8e" "$RISC_rate_2")
        RISC_rate_3=$(printf "%.8e" "$RISC_rate_3")
        RISC_average=$(printf "%.8e" "$RISC_average")
        XYZ_S1_S0=$(printf "%.10f" "$XYZ_S1_S0")
        XYZ_T1_S1=$(printf "%.10f" "$XYZ_T1_S1")
        XYZ_T1_S0=$(printf "%.10f" "$XYZ_T1_S0")
        if [ ! -z "$E_Hab" ]; then
            echo "Running:: MarcusCTRate $E_ES $E_Hab $E_TS $lamda"
            MarcusCTRate $E_ES $E_Hab $E_TS $lamda
            MarcusRate=$(MarcusCTRate $E_ES $E_Hab $E_TS $lamda | awk '{print $5}') 
        else
            MarcusRate="NaN"
        fi
        # Debugging: Print the values of the variables
        # echo "Debug: molecule=$molecule, functional=$functional, SPE_S0=$SPE_S0, SPE_S1=$SPE_S1, SPE_T1=$SPE_T1, Energy_Gap=$Energy_Gap, Fluorescence_rate=$Fluorescence_rate, RISC_rate_1=$RISC_rate_1, RISC_rate_2=$RISC_rate_2, RISC_rate_3=$RISC_rate_3, RISC_average=$RISC_average, RISC_rate_1=$RISC_rate_1, RISC_rate_2=$RISC_rate_2, RISC_rate_3=$RISC_rate_3, RISC_average=$RISC_average, DIndex_S1=$DIndex_S1, XYZ_S1_S0=$XYZ_S1_S0, XYZ_T1_S0=$XYZ_T1_S0, XYZ_T1_S1=$XYZ_T1_S1, ref=$ref"
        #        "Molecule_Name,Functional,RISC_Rate,npoints1,npoints2,K_Vector_sum,lamda_sum(cm-1),lamda_max_freq,lamda_maxmode_socme,HR_max_freq,HR_max_mode,HR_maxmode_socme1,HR_maxmode_socme2,rmsd_s1_t1,ref_socme1,ref_socme2"
        echo "\"${molecule}\",\"${functional}\",\"$RISC_average\",\"$npoints1\",\"$npoints2\",\"$K_vector\",\"$lamda\",\"$lamda_max_freq\",\"$lamda_maxmode_socme1\",\"$lamda_maxmode_socme2\",\"$HR_max_freq\",\"$HR_max_mode\",\"$HR_max_factor\",\"$HR_maxmode_socme1\",\"$HR_maxmode_socme2\",\"$XYZ_T1_S1\",\"$ref_socme1\",\"$ref_socme2\",\"$MarcusRate\"" >> ../$output

        


    done
    cd ..
done

# {
#     for ((i=0; i<${#MoleculeNames[@]}; i++)); do
#         echo "${MoleculeNames[i]},${Functionals[i]},${spe_s0[i]},${spe_s1[i]},${spe_t1[i]},${energy_gap[i]},${fluorescence_rate[i]},${risc_rate_1[i]},${risc_rate_2[i]},${risc_rate_3[i]},${risc_rate_avg[i]},${risc_rate_1[i]},${risc_rate_2[i]},${risc_rate_3[i]},${risc_rate_avg[i]},${CT_S1[i]},${xyz_S1_S0[i]},${xyz_T1_S0[i]},${xyz_T1_S1[i]},${REF[i]}"
#     done
# } >> $output

# echo "Data has been processed and saved to $output"