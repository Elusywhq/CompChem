#!/bin/bash

#PBS -P Personal
#PBS -q normal
#PBS -l select=1:ncpus=CR:mpiprocs=CR:mem=MRYGB
#PBS -l walltime=WT:00:00
#PBS -m abe

input=RN
orbital=WF          # input file for restart the calculation, if needed

#---------------------------------------------------------------------------
#   normally you should not need to change anything below this line
export OMP_NUM_THREADS=1

# module load openmpi/4.1.2-hpe
module load openmpi/4.1.5-gcc11
if [ "$USER" = "e0732533"]; then
  export ORCA_ROOT=/home/project/11003762/orca_6_0_0/
else
  export ORCA_ROOT=/home/users/nus/$USER/Software/orca_6_0_0/ 
fi
export PATH=$ORCA_ROOT:$PATH
export MPI_ROOT=/app/apps/openmpi/4.1.5-gcc11/
export PATH=$MPI_ROOT/bin:$PATH
export LD_LIBRARY_PATH=$MPI_ROOT/lib:$LD_LIBRARY_PATH

CurrDir=$PBS_O_WORKDIR
cd $CurrDir

# scratch folder. Make it "input- dependent"
tdir=/home/users/nus/$USER/scratch/orcacalc/${input%.inp}

if [ ! -d $tdir ] ; then
    mkdir -p $tdir
else
    rm -rf  $tdir/*
fi

cd $tdir
echo "ORCA calculation is being executed in: "$tdir
echo `pwd`


cp $CurrDir/$input      $tdir/$input

if grep -q "* XYZFILE" $CurrDir/$input; then
  XYZFILE=`grep "* XYZFILE" $CurrDir/$input | awk '{print $5}'` 
  cp $CurrDir/$XYZFILE $tdir/
fi

if [ -f ${input%.inp}.nodes  ]; then rm -rf ${input%.inp}.nodes ; fi ;
#for i in $ncpus ; do
cat $PBS_NODEFILE > ${input%.inp}.nodes
cat $PBS_NODEFILE
echo $PBS_NODEFILE
#done

# if it is a restart calcualtion, then check if the $orbital is
# exactly the same as ${input%.inp}.gbw. They must differ
if [ -f $CurrDir/$orbital ]; then
   if [ "$orbital" -eq "${input%.inp}.gbw" ] ; then
      echo "Restart GBW file is identical to ${input%.inp}.gbw. "
      echo "Please give a different name."
      echo "GBW file given for restart: " $orbital
      echo "GBW of this calculation   : " ${input%.inp}.gbw
   else
      # correct case: copy the file to $tdir
      cp $CurrDir/$orbital    $tdir/$orbital
   fi
fi

# actual execution of ORCA
$ORCA_ROOT/orca  $input > ${input%.inp}.out 2> ${input%.inp}.err

# Check Output result::
finish=0
if [ -f $tdir/${input%.inp}.out ]; then
  finish=$(grep "****ORCA TERMINATED NORMALLY****" $tdir/${input%.inp}.out | wc -l)
 else 
  echo "$tdir/${input%.inp}.out is missing, exit..."
  exit 99
fi

i=0
while [ $finish -eq 0 ]; do
  i=$((i+1))
  echo "Checking round $i"
  echo "ORCA calculation returned with error, restart the calculation..."
# Back up for previous run
  cp $tdir/${input%.inp}.out $tdir/${input%.inp}.o$i
  rm $tdir/${input%.inp}.gbw
# Redo the calculation
  $ORCA_ROOT/orca  $input > ${input%.inp}.out 2> ${input%.inp}.err 
# Check finish status again
  finish=$(grep -c "****ORCA TERMINATED NORMALLY****" $tdir/${input%.inp}.out)
  if [ $finish -eq 1 ]; then
    break
  fi  
   if [ $i -eq 10 ]; then
    echo "Iteration hits the limit to $i, quitting... "
    if [ -f  $tdir/${input%.inp}.out  ] ; then  cp $tdir/${input%.inp}.out   $CurrDir/  ; fi ;
    if [ -f  $tdir/${input%.inp}.err  ] ; then  cp $tdir/${input%.inp}.err   $CurrDir/  ; fi ; 
    exit 99
  fi 
done 

hess=0
echo "Checking imaginary mode... "

freq=`grep "vibrational_frequencies" -A 8 ${input%.inp}.hess | tail -n 1 | awk '{print $2}'`
if [[ "$freq" == -* ]]; then
  echo "Vibrational mode 6 is an imaginary mode."
  echo "Frequency 6: $freq"
  hess=1
else
  echo "Frequency 6: $freq"
  echo "No imaginary mode found. Exiting..."
  hess=0
fi


xyz=`grep "* XYZFILE 0" $input | awk '{print $5}'`

while [ $hess -eq 1 ]; do
  h=$((h+1))
  cp -f $xyz ${input%.inp}.xyz.i$h
  echo "${input%.inp}.xyz.i$h is backed up."

  $HOME/bin/ORCA/ORCA-displacement $input
  cat ${input%.inp}_v006.xyz > $xyz
  echo "Replacing xyz file and restart the calculation..."

  # actual execution
  $ORCA_ROOT/bin/orca  $input > ${input%.inp}.out 2> ${input%.inp}.err 

  echo "Checking imaginary mode again. Iteration: $h "

  freq=`grep "vibrational_frequencies" -A 8 ${input%.inp}.hess | tail -n 1 | awk '{print $2}'`

  if [[ "$freq" == -* ]]; then
    echo "Vibrational mode 6 is an imaginary mode."
    echo "Frequency 6: $freq"
    hess=1
  else
    echo "Frequency 6: $freq"
    echo "No imaginary mode found. Exiting..."
    break
  fi  
done

#   if the calculation is successful, then copy the
#   useful files back the original folder
#if [ $? -eq 0 ]; then
   if [ -f  $tdir/${input%.inp}.out          ] ; then  cp $tdir/${input%.inp}.out           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.err          ] ; then  cp $tdir/${input%.inp}.err           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.densities    ] ; then  cp $tdir/${input%.inp}.densities     $CurrDir/  ; fi ;
   if [ -f  $tdir/*.cube                     ] ; then  cp $tdir/*.cube                      $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.trj          ] ; then  cp $tdir/${input%.inp}.trj           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.cis          ] ; then  cp $tdir/${input%.inp}.cis           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.xyz          ] ; then  cp $tdir/${input%.inp}.xyz           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.spectrum     ] ; then  cp $tdir/${input%.inp}.spectrum      $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.plt          ] ; then  cp $tdir/${input%.inp}.plt           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.hess         ] ; then  cp $tdir/${input%.inp}.hess          $CurrDir/  ; fi ;
#   if [ -f  $tdir/${input%.inp}_property.txt ] ; then  cp $tdir/${input%.inp}_property.txt  $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.gbw           ] ; then  cp $tdir/${input%.inp}.gbw            $CurrDir/  ; fi ;   
#   cp $tdir/*.plt $CurrDir/
#fi

#-----------------------------------------------------

exit $?

