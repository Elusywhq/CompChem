#!/bin/bash

#PBS -q colo-chmlu 
#PBS -l select=1:ncpus=CR:mpiprocs=CR:mem=120GB
#PBS -j oe
#PBS -m abe
#PBS -p 1023

input=RN
orbital=WF          # input file for restart the calculation, if needed

#---------------------------------------------------------------------------
#   normally you should not need to change anything below this line
source /app1/ebenv
module load ORCA/6.0.1-foss-2023b-avx2
EBENV_AVX2=1 
#---------------------------------------------------------------------------
#   normally you should not need to change anything below this line
export ORCA_ROOT=/app1/ebapps/arches/flat-avx2/software/ORCA/6.0.1-foss-2023b-avx2/
export PATH=$ORCA_ROOT/bin:$PATH
export LD_LIBRARY_PATH=$ORCA_ROOT/lib:$LD_LIBRARY_PATH

export MPI_ROOT=/app1/ebapps/arches/flat/software/OpenMPI/4.1.6-GCC-13.2.0
export PATH=$MPI_ROOT/bin:$PATH
export LD_LIBRARY_PATH=$MPI_ROOT/lib:$LD_LIBRARY_PATH


CurrDir=$PBS_O_WORKDIR
cd $CurrDir

export OMP_NUM_THREADS=1

# scratch folder. Make it "input- dependent"
tdir=/hpctmp/$USER/${input%.inp}

if [ ! -d $tdir ] ; then
    mkdir -p $tdir
else
    rm -rf  $tdir/*
fi

cd $tdir
echo "ORCA calculation is being executed in: "$tdir
echo `pwd`




cp $CurrDir/$input      $tdir/$input

if grep -q "* XYZFILE" $CurrDir/$input; then
  XYZFILE=`grep "* XYZFILE" $CurrDir/$input | awk '{print $5}'` 
  cp $CurrDir/$XYZFILE $tdir/
fi

if grep -q "GSHESSIAN" $CurrDir/$input; then
  GSHESSIAN=`grep "GSHESSIAN" $CurrDir/$input | awk '{print $2}'| tr -d '"'` 
  cp $CurrDir/$GSHESSIAN $tdir/
  GS=${GSHESSIAN%.hess}
fi

if grep -q "ESHESSIAN" $CurrDir/$input; then
  ESHESSIAN=`grep "ESHESSIAN" $CurrDir/$input | awk '{print $2}'| tr -d '"'` 
  cp $CurrDir/$ESHESSIAN $tdir/
  ES=${ESHESSIAN%.hess}
fi

if grep -q "TSHESSIAN" $CurrDir/$input; then
  TSHESSIAN=`grep "TSHESSIAN" $CurrDir/$input | awk '{print $2}'| tr -d '"'` 
  cp $CurrDir/$TSHESSIAN $tdir/
  TS=${TSHESSIAN%.hess}
fi

if grep -q "ISCFSHESS" $CurrDir/$input; then
  ISCFSHESS=`grep "ISCFSHESS" $CurrDir/$input | awk '{print $2}'| tr -d '"'` 
  cp $CurrDir/$ISCFSHESS $tdir/
  final=${ISCFSHESS%.hess} 
fi

if grep -q "ISCISHESS" $CurrDir/$input; then
  ISCISHESS=`grep "ISCISHESS" $CurrDir/$input | awk '{print $2}'| tr -d '"'` 
  cp $CurrDir/$ISCISHESS $tdir/
  init=${ISCISHESS%.hess}
fi

Energy1=`grep "Electronic energy " $CurrDir/$init.out | awk '{print $4}'`
Energy2=`grep "Electronic energy " $CurrDir/$final.out | awk '{print $4}'`
DEnergyT1=$(echo "($Energy1 - $Energy2) * 219474.6" | bc)
DiffEnergyT1=$(echo "($DEnergyT1 + 0.5) / 1" | bc) 
sed -i "s/DELE/DELE $DiffEnergyT1/g" $tdir/$input
echo "DELE $DiffEnergyT1" 


# if it is a restart calcualtion, then check if the $orbital is
# exactly the same as ${input%.inp}.gbw. They must differ
if [ -f $CurrDir/$orbital ]; then
   if [ "$orbital" -eq "${input%.inp}.gbw" ] ; then
      echo "Restart GBW file is identical to ${input%.inp}.gbw. "
      echo "Please give a different name."
      echo "GBW file given for restart: " $orbital
      echo "GBW of this calculation   : " ${input%.inp}.gbw
   else
      # correct case: copy the file to $tdir
      cp $CurrDir/$orbital    $tdir/$orbital
   fi
fi

# actual execution of ORCA
$ORCA_ROOT/bin/orca  $input > ${input%.inp}.out 2> ${input%.inp}.err

# Check Output result::
finish=0
if [ -f $tdir/${input%.inp}.out ]; then
  finish=$(grep "****ORCA ESD FINISHED WITHOUT ERROR****" $tdir/${input%.inp}.out | wc -l)
 else 
  echo "$tdir/${input%.inp}.out is missing, exit..."
  exit 99
fi

i=0
while [ $finish -eq 0 ]; do
  i=$((i+1))
  echo "Checking round $i"
  echo "ESD module return with error, redo the calculation..."
  echo "Removeing ${input%.inp}.gbw..."
  rm ${input%.inp}.gbw
# Back up for previous run
  cp $tdir/${input%.inp}.out $tdir/${input%.inp}.o$i
# Redo the calculation
  $ORCA_ROOT/bin/orca  $input > ${input%.inp}.out 2> ${input%.inp}.err 
# Check finish status again
  finish=$(grep -c "****ORCA ESD FINISHED WITHOUT ERROR****" $tdir/${input%.inp}.out)
  if [ $finish -eq 1 ]; then
    break
  fi 
  if [ $i -eq 5 ]; then
    echo "Iteration hits the limit to $i, quitting... "
    if [ -f  $tdir/${input%.inp}.out  ] ; then  cp $tdir/${input%.inp}.out   $CurrDir/  ; fi ;
    if [ -f  $tdir/${input%.inp}.err  ] ; then  cp $tdir/${input%.inp}.err   $CurrDir/  ; fi ; 
    exit 99
  fi 

done 



#   if the calculation is successful, then copy the
#   useful files back the original folder
#if [ $? -eq 0 ]; then
   if [ -f  $tdir/${input%.inp}.out          ] ; then  cp $tdir/${input%.inp}.out           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.err          ] ; then  cp $tdir/${input%.inp}.err           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.densities    ] ; then  cp $tdir/${input%.inp}.densities     $CurrDir/  ; fi ;
   if [ -f  $tdir/*.cube                     ] ; then  cp $tdir/*.cube                      $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.trj          ] ; then  cp $tdir/${input%.inp}.trj           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.cis          ] ; then  cp $tdir/${input%.inp}.cis           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.xyz          ] ; then  cp $tdir/${input%.inp}.xyz           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.spectrum     ] ; then  cp $tdir/${input%.inp}.spectrum      $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.plt          ] ; then  cp $tdir/${input%.inp}.plt           $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.FS.hess         ] ; then  cp $tdir/${input%.inp}.hess          $CurrDir/  ; fi ;
  # if [ -f  $tdir/${input%.inp}_property.txt ] ; then  cp $tdir/${input%.inp}_property.txt  $CurrDir/  ; fi ;
   if [ -f  $tdir/${input%.inp}.gbw           ] ; then  cp $tdir/${input%.inp}.gbw            $CurrDir/  ; fi ;   
#   cp $tdir/*.plt $CurrDir/
#fi

#-----------------------------------------------------

exit $?
