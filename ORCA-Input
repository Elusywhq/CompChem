#!/bin/bash

# --- Create a tuple list for job types, functionals, states, and basis sets
job_types=("Optfreq" "Optimisation" "Frequency" "Fluorescence" "Intersystem Crossing" "Reverse Intersystem Crossing" "Phosphorescence" "Spin-Orbit Coupling")
functionals=("O3LYP" "pbe0" "camB3LYP" "M062X" "wB97XD4"  )
states=("s0" "s1" "t1")
GS_methods=("scf" "xtb" "goat")
ES_methods=("tddft" "Dscf")
TS_methods=("tddft" "scf" "Dscf")
SOC_methods=("SOMF4X" "ZEFF" "RISOMF1X")

# --- Create a tuple list for job type labels, functional labels, state labels, and basis set labels
job_type_labels=("optfreq" "opt" "freq" "fluo" "isc" "risc" "phosph" "soc")
functional_labels=( "o3lyp d4" "pbe0 D4" "cam-B3LYP D4" "LIBXC(M062X) D3zero" "wB97X-D4" )
state_labels=("xyz_Singlet" "xyz_Singlet" "xyz_Triplet")
GS_methods_labels=("scf" "xtb" "goat")
ES_methods_labels=("tddft_S1" "Dscf_S1")
TS_methods_labels=("tddft_S1" "scf" "Dscf_T1")
SOC_methods_labels=("SOMF(4X)" "ZEFF-SOC" "RI-SOMF(1X)")


# --- Print available options as a table
print_table() {
  local -n arr=$1
  echo "Index | Option"
  echo "----------------"
  for ((i=0; i<${#arr[@]}; i++)); do
    printf "%-5s | %s\n" "$(($i+1))" "${arr[$i]}"
  done
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo "Job Types:"
  print_table job_types
  echo ""
  echo "Functionals:"
  print_table functionals
  echo ""
  echo "States:"
  print_table states
  echo ""
  echo "GS Methods:"
  print_table GS_methods
  echo ""
  echo "ES Methods:"
  print_table ES_methods
  echo ""
  echo "TS Methods:"
  print_table TS_methods
  exit 0
fi

mol=$1
xyz=$2
stat=$3
job=$4
func=$5
met=$6
ES=$7
TS=$8
name=$9

# ------------------------ User Input --------------------------

# --- Molecule name
  if [ -z "$mol" ]; then
    read -e -p "Please enter a valid molecule prefix without ' ', ',', '*', or '-': " answer0
  else
    answer0=$mol
  fi

  if [ -z "$answer0" ]; then 
    echo "Please enter a valid molecule prefix without ' ', ',', '*', or '-'."
    exit 99
  else
    molecule="$answer0"
    echo "Molecule prefix: $molecule"
  fi


# --- XYZ file
  if [ -z "$xyz" ]; then
    read -e -p "Please enter the path to the XYZ file: " answer1
  else
    answer1=$xyz
  fi
  
  if [ -f "$answer1" ]; then
    coord="$answer1"
    echo "Structure: $coord"
  else 
    read -e -p "$answer1 does not exist, do you want to continue? (y/n, y): " answer1a
    if [ "$answer1a" == "n" ]; then
      exit 99
    else 
      echo "Structure: $answer1"
    fi
  fi


# --- State
  if [ -z "$stat" ]; then
    echo ""
    echo "States available:"
    for ((i=0; i<${#states[@]}; i++)); do
      echo "$(($i+1)). ${states[$i]} "
    done
    read -e -p "Please enter the number corresponding to your state: " state_number
  else
    state_number=$stat
  fi

  state_index=$(($state_number-1))
  if [[ $state_index -lt 0 || $state_index -ge ${#state_labels[@]} ]]; then
    echo "Invalid state number entered."
    exit 99
  fi

  state=${states[$state_index]}
  state_label=${state_labels[$state_index]}
  echo "State: $state"


# --- job type
  if [ -z "$job" ]; then
    echo ""
    echo "Job type available:"
    for ((i=0; i<${#job_types[@]}; i++)); do
      echo "$(($i+1)). ${job_types[$i]} "
    done
    read -e -p "Please enter the number corresponding to your job type: " job_type_number
  else
    job_type_number=$job
  fi

  job_type_index=$(($job_type_number-1))
  if [[ $job_type_index -lt 0 || $job_type_index -ge ${#job_types[@]} ]]; then
    echo "Invalid job type number entered."
    exit 99
  fi

  job_type=${job_types[$job_type_index]}
  job_type_label=${job_type_labels[$job_type_index]}
  method="esd"
  echo "Job type: $job_type"
 
 # --- Method
  if [ "$job_type" == "Optimisation" ] || [ "$job_type" == "Optfreq" ]; then
  # --- S0 method
    # --- S0 method
    if [ "$state" == "s0" ]; then
      if [ -z "$met" ]; then
        GS_method_index=0
      else
        GS_method_index=$(($met-1))
      fi
    
      if [[ $GS_method_index -lt 0 || $GS_method_index -ge ${#GS_methods[@]} ]]; then
        echo "Invalid optimisation method number entered."
        exit 99
      fi
    
      GS_method=${GS_methods[$GS_method_index]}
      opt_method_label=${GS_methods_labels[$GS_method_index]}
      method="$GS_method"
      echo "Optimisation method: $GS_method"
    fi

  # --- S1 method
    if [ "$state" == "s1" ]; then
      if [ -z "$met" ]; then
        echo ""
        echo "Optimisation method available:"
        for ((i=0; i<${#ES_methods[@]}; i++)); do
          echo "$(($i+1)). ${ES_methods[$i]} "
        done
        read -e -p "Please enter the number corresponding to your optimisation method: " opt_method_number
      else
        opt_method_number=$met
      fi
    
      ES_method_index=$(($opt_method_number-1))
      if [[ $ES_method_index -lt 0 || $ES_method_index -ge ${#ES_methods[@]} ]]; then
        echo "Invalid optimisation method number entered."
        exit 99
      fi
    
      ES_method=${ES_methods[$ES_method_index]}
      opt_method_label=${ES_methods_labels[$ES_method_index]}
      method="$ES_method"
      echo "Optimisation method: $method"
    
    fi

    if [ "$state" == "t1" ]; then
      if [ -z "$met" ]; then
        echo ""
        echo "Optimisation method available:"
        for ((i=0; i<${#TS_methods[@]}; i++)); do
          echo "$(($i+1)). ${TS_methods[$i]} "
        done
        read -e -p "Please enter the number corresponding to your optimisation method: " opt_method_number
      else
        opt_method_number=$met
      fi
    
      TS_method_index=$(($opt_method_number-1))
      if [[ $TS_method_index -lt 0 || $TS_method_index -ge ${#TS_methods[@]} ]]; then
        echo "Invalid optimisation method number entered."
        exit 99
      fi
    
      TS_method=${TS_methods[$TS_method_index]}
      opt_method_label=${TS_methods_labels[$TS_method_index]}
      method="$TS_method"
      echo "Optimisation method: $method"
    fi
  fi

  # --- T1 method
# SOC settings
if [ "$job_type" == "Spin-Orbit Coupling" ]; then
  if [ -z "$met" ]; then
     met=1
  fi
  soc_method_number=$met
  soc_method_index=$(($soc_method_number-1))
  soc_method=${SOC_methods[$soc_method_index]}
  soc_method_label=${SOC_methods_labels[$soc_method_index]}
  method="$soc_method"
  echo "Spin-Orbit Coupling method: $soc_method"
fi
 

 # --- ESD checking

# --- functional
  if [ -z "$func" ]; then
    echo ""
    echo "Functionals available:"
    for ((i=0; i<${#functionals[@]}; i++)); do
      echo "$(($i+1)). ${functionals[$i]} "
    done
    read -e -p "Please enter the number corresponding to your functional: " functional_number
  else
    functional_number=$func
  fi

  functional_index=$(($functional_number-1))
  if [[ $functional_index -lt 0 || $functional_index -ge ${#functionals[@]} ]]; then
    echo "Invalid functional number entered."
    exit 99
  fi

  functional=${functionals[$functional_index]}
  functional_label=${functional_labels[$functional_index]}
  echo "Functional: $functional"


# --- Prompt the user to select the basis set
  #  echo ""
  #  echo "Basis sets available:"
  #  for ((i=0; i<${#basis_sets[@]}; i++)); do
  #    echo "$(($i+1)). ${basis_sets[$i]} - ${basis_set_labels[$i]}"
  #  done
  #  read -p "Please enter the number corresponding to your basis set: " basis_set_number
  #     # basis_set_number=2 # for testing def2-SVP
  #  basis_set_index=$(($basis_set_number-1))
  #  if [[ $basis_set_index -lt 0 || $basis_set_index -ge ${#basis_sets[@]} ]]; then
  #    echo "Invalid basis set number entered."
  #    exit 99
  #  fi
  #  basis_set=${basis_sets[$basis_set_index]}
  #  basis_set_label=${basis_set_labels[$basis_set_index]}
  #  echo "Basis set: $basis_set"
basis_set="svp"
basis_set_label="def2-SVP"
echo "Basis set: $basis_set"

if [ -z "$name" ]; then
  op="${molecule}_${functional}_${basis_set}_${state}_${method}_${job_type_label}.inp"
else
  op="${name%.*}.inp"
fi
# if [ -f "$op" ]; then
#   echo "$op already exists."
#   exit 99
# fi

# ------------------------------------- Summary ------------------------------------
 echo ""
 echo "****************************************************"
 echo "CALCULATION SUMMARY"
 echo "Molecule: $molecule"
 echo "Functional: $functional"
 echo "State: $state"
 echo "Method: $method"
 echo "Basis set: $basis_set"
 echo "Job type: $job_type"
 echo "xyz file: $coord"
 echo "****************************************************"
#  echo "${molecule}_${functional_label}_${state_label}_${opt_method}_${basis_set}_${job_type_label}.inp"

 # --- Create the input file

  # echo "Creating input file: $op"



# ------ Source block_input
  source $HOME/bin/ORCA/block_input
  initial_input > "$op"
# ------ Define Keywords
  addkeywords "$functional_label"
  # addkeywords $basis_set_label
  # addkeywords "def/2J"

# ------ Add blocks 
  basis $basis_set_label >> "$op"
  if [ "$job_type" != "Optimisation" ] ; then
      $job_type_label >> "$op"
  fi

  if [ "$job_type" == "Spin-Orbit Coupling" ]; then
    addkeywords "$soc_method_label"
    # $soc_method_label >> "$op"
  fi

  if [  "$method" == "esd" ]; then
    coord=" "
  fi


 

  if [ ! -z "$opt_method_label" ]; then
    # if [ "$opt_method_label" != "opt" ]; then
      # echo "Optimisation method: $opt_method_label"
            "opt" >> "$op"
      $opt_method_label >> "$op"
    # fi
  fi
# ------ ESD bolcks

  # if [ "$job_type" == "Optimisation" ] || [ "$job_type" == "Optfreq" ]; then
  #   optfreq >> "$op"
  # fi

  # ------ Write Keywords
  insert_keyword "$op"


  $state_label $coord >> "$op"


  
  # --- Settings for ESD
  GS="${molecule}_${functional}_svp_s0_scf_optfreq"

  if [ -z "$7" ]; then
    ES="${molecule}_${functional}_svp_s1_Dscf_optfreq"
  fi
  
  if [ -z "$8" ]; then
    TS="${molecule}_${functional}_svp_t1_scf_optfreq"
  fi

  if [ "$method" == "Dscf" ]; then
    sed -i "s/S0NAME/${coord%.xyz}/" "$op"
    echo ${coord%.xyz}
  fi

  if [ "$job_type" == "Fluorescence" ]; then
    sed -i "s/groundstate/$GS/g" "$op"
    sed -i "s/singletstate/$ES/g" "$op"
    sed -i "s/* XYZFILE 0 1/* XYZFILE 0 1 $GS.xyz/g" "$op"
  fi
  
  echo "$op created."

  if [ "$job_type" == "Reverse Intersystem Crossing" ]; then
    sh $HOME/bin/ORCA/ISC.sh "$op" "$ES" "$TS"
    rm -f "$op"
  fi

  if [ "$job_type" == "Intersystem Crossing" ] ; then
    sh $HOME/bin/ORCA/ISC.sh "$op" "$TS" "$ES"
    rm -f "$op"
  fi 

  if [ "$job_type" == "Phosphorescence" ]; then
    sh $HOME/bin/ORCA/phosp.sh "$op" "$TS" "$ES"
  fi

  if [ -f $op ]; then
    echo "Input file created."
  else
    echo "Input file not created."
  fi

exit 0
