#!/bin/bash

# Define default values
cores="16"
name="default"
memory="390"
gbw=0
wt=24


if [[ $(hostname) == *"atlas"* ]]; then
  Host="hpc"
elif [[ $(hostname) == *"asp2a"* ]]; then
  Host="nscc"
fi


  project=11003762

template=template_orca_default_$Host

# Function to display usage information
usage() {
  echo "Usage: ORCA-submission [OPTIONS]"
  echo "Options:"
  echo "  --help         Display this help message."
  echo "  -c <cores>     Specify number of cores, default at 64 (must be an integer)."
  echo "  -n <name>      Specify a name of the submit script (must be a string)."
  echo "  -m  <memory>   Specify memory, default at 128 (must be an integer)."
#  echo "  -loc           Calculation is going to run in local directory."
#  echo "  -w             Specify another gbw file."
  echo "  -t             Specify walltime, default at 24."
  echo "  -esd           Turning on the ESD checking mode (Please check walltime)"
  exit 1
}

# Function to check if a string is an integer
is_integer() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    return 0  # It's an integer
  else
    return 1  # It's not an integer
  fi  
}

# Parse command-line options
while [ "$#" -gt 0 ]; do
  case "$1" in
    --help) 
      usage 
      ;;  
    -c) 
      if [ -n "$2" ] && is_integer "$2"; then
        cores="$2" 
        shift
      else
        echo "Error: -c requires a parameter (must be an integer)."
        exit 1
      fi  
      ;;  
    -n)
      if [ -n "$2" ] && ! is_integer "$2"; then
        name="$2"
        shift
      else
        echo "Error: -n requires a name (must be a string)."
        exit 1
      fi
      ;;
    -w)
      if [ -n "$2" ] ; then
        wf="$2"
	gbw=1
        shift
      else
        echo "Error: -n requires a name (must be a string)."
        exit 1
      fi
      ;;
   -m)
      if [ -n "$2" ] && is_integer "$2"; then
        memory="$2"
        shift
      else
        echo "Error: -m requires a parameter (must be an integer)."
        exit 1
      fi  

      ;;
    -loc)
      template=template_orca_loc
      ;; 
   -t)
      if [ -n "$2" ] && is_integer "$2"; then
        wt="$2"
        shift
      else
        echo "Error: -m requires a parameter (must be an integer)."
        exit 1
      fi  
      ;;

    -esd)
      template=template_orca_esd_$Host
      ;; 
  *)
      echo "Error: Unknown option: $1"
      usage
      ;;
  esac
  shift
done

# Your script logic goes here

sed -e "s/CR/$cores/g" $HOME/bin/ORCA/$template > ./$name.sh
sed -i "s/RN/$name.inp/g" ./$name.sh
sed -i "s/MRY/$memory/g" ./$name.sh
sed -i "s/WT/$wt/g" ./$name.sh


if [ "$scr" = false ]; then
  sed -i "s/Scratch=TRUE/Scratch=FALSE/g" ./$name.sh
fi

if [ $gbw -eq 1 ]; then
  sed -i "s/WF/$wf.gbw/g" ./$name.sh
else 
  sed -i "s/WF/$name.gbw/g" ./$name.sh 
fi 

if [ "$USER" == "e0732533" ]; then
  sed -i "s/#PBS -P Personal/#PBS -P $project/g" ./$name.sh
fi

# Example usage
echo "Cores: $cores"
echo "Name: $name"
echo "Memory: $memory"
echo "Walltime: $wt h"

if [ -n "$wf" ] ; then
  echo "WAVEfunction from: $wf.gbw"
fi

if [ "$scr" = false ]; then
  echo "Calculation is going to run in local directory."
fi
